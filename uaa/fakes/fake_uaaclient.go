// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/tscolari/cfapi/uaa"
)

type FakeUAAClient struct {
	AuthenticateStub        func(username, password string) (*uaa.Tokens, error)
	authenticateMutex       sync.RWMutex
	authenticateArgsForCall []struct {
		username string
		password string
	}
	authenticateReturns struct {
		result1 *uaa.Tokens
		result2 error
	}
	RefreshTokenStub        func(refreshToken string) (*uaa.Tokens, error)
	refreshTokenMutex       sync.RWMutex
	refreshTokenArgsForCall []struct {
		refreshToken string
	}
	refreshTokenReturns struct {
		result1 *uaa.Tokens
		result2 error
	}
}

func (fake *FakeUAAClient) Authenticate(username string, password string) (*uaa.Tokens, error) {
	fake.authenticateMutex.Lock()
	fake.authenticateArgsForCall = append(fake.authenticateArgsForCall, struct {
		username string
		password string
	}{username, password})
	fake.authenticateMutex.Unlock()
	if fake.AuthenticateStub != nil {
		return fake.AuthenticateStub(username, password)
	} else {
		return fake.authenticateReturns.result1, fake.authenticateReturns.result2
	}
}

func (fake *FakeUAAClient) AuthenticateCallCount() int {
	fake.authenticateMutex.RLock()
	defer fake.authenticateMutex.RUnlock()
	return len(fake.authenticateArgsForCall)
}

func (fake *FakeUAAClient) AuthenticateArgsForCall(i int) (string, string) {
	fake.authenticateMutex.RLock()
	defer fake.authenticateMutex.RUnlock()
	return fake.authenticateArgsForCall[i].username, fake.authenticateArgsForCall[i].password
}

func (fake *FakeUAAClient) AuthenticateReturns(result1 *uaa.Tokens, result2 error) {
	fake.AuthenticateStub = nil
	fake.authenticateReturns = struct {
		result1 *uaa.Tokens
		result2 error
	}{result1, result2}
}

func (fake *FakeUAAClient) RefreshToken(refreshToken string) (*uaa.Tokens, error) {
	fake.refreshTokenMutex.Lock()
	fake.refreshTokenArgsForCall = append(fake.refreshTokenArgsForCall, struct {
		refreshToken string
	}{refreshToken})
	fake.refreshTokenMutex.Unlock()
	if fake.RefreshTokenStub != nil {
		return fake.RefreshTokenStub(refreshToken)
	} else {
		return fake.refreshTokenReturns.result1, fake.refreshTokenReturns.result2
	}
}

func (fake *FakeUAAClient) RefreshTokenCallCount() int {
	fake.refreshTokenMutex.RLock()
	defer fake.refreshTokenMutex.RUnlock()
	return len(fake.refreshTokenArgsForCall)
}

func (fake *FakeUAAClient) RefreshTokenArgsForCall(i int) string {
	fake.refreshTokenMutex.RLock()
	defer fake.refreshTokenMutex.RUnlock()
	return fake.refreshTokenArgsForCall[i].refreshToken
}

func (fake *FakeUAAClient) RefreshTokenReturns(result1 *uaa.Tokens, result2 error) {
	fake.RefreshTokenStub = nil
	fake.refreshTokenReturns = struct {
		result1 *uaa.Tokens
		result2 error
	}{result1, result2}
}

var _ uaa.UAAClient = new(FakeUAAClient)
